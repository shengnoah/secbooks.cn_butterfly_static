{"total":629,"pageSize":12,"pageCount":53,"data":[{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"lua/2016-06-01-Home","date":"2024-03-17T14:44:57.313Z","updated":"2024-03-16T11:44:51.812Z","comments":true,"path":"api/articles/lua/2016-06-01-Home.json","cover":null,"text":"Lua基础教程 permalink: /lua_guide/Home/ ","link":"","photos":[],"count_time":{"symbolsCount":36,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"Lua垃圾回收机制","uid":"a34942b7e84e08a52441ea25cc5475d6","slug":"lua/2016-06-01-garbage-collection","date":"2024-03-17T14:44:57.309Z","updated":"2024-03-16T11:44:51.816Z","comments":true,"path":"api/articles/lua/2016-06-01-garbage-collection.json","cover":null,"text":" Lua 垃圾回收机制 Lua 通过特定算法的垃圾回收机制实现自动内存管理。由于自动内存管理机制的存在，作为程序开发人员： 不需要关心对象的内存分配问题。 不再使用对象时，除了将引用它的变量设为 nil，不需要主动释放对象。 Lua 的垃圾回收器会不断运行去收集不再被 Lua 程...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"Lua游戏开发","uid":"0574a789cafc1558adcaaf40b641bfb0","slug":"lua/2016-06-01-game-programming","date":"2024-03-17T14:44:57.305Z","updated":"2024-03-16T11:44:51.815Z","comments":true,"path":"api/articles/lua/2016-06-01-game-programming.json","cover":null,"text":" Lua 游戏开发 Lua 语言因其结构和语法的简洁性而在各类游戏引擎中被广泛使用。游戏对图形画面要求非常苛刻，这无疑需消耗大量的内存空间，而这些内存空间的管理是非常棘手的问题。Lua 语言有自动的垃圾回收机制，这种自动化的内存管理机制也使得 Lua 受到游戏引擎开发者的青睐。著...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"Lua函数","uid":"4b8da2e6835e8f700ba371a83ecbe6ab","slug":"lua/2016-06-01-functions","date":"2024-03-17T14:44:57.302Z","updated":"2024-03-16T11:44:51.815Z","comments":true,"path":"api/articles/lua/2016-06-01-functions.json","cover":null,"text":" Lua 函数 函数用于将一组语句组合起来完成一个任务。你可以将你的代码分割到不同的函数中。如何将你的代码分到不同的函数中完全由你自己决定，不过一般会按照逻辑功能进行划分，每个函数都执行一个特定的任务。 在 Lua 中提供了大量的内置函数供我们使用。例如，print() 函数用于...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"Lua文件I/O","uid":"7cdf9755b9d268215aaceca81f7a3596","slug":"lua/2016-06-01-file-io","date":"2024-03-17T14:44:57.299Z","updated":"2024-03-17T15:03:45.152Z","comments":true,"path":"api/articles/lua/2016-06-01-file-io.json","cover":null,"text":" Lua 文件 I/O Lua 的 IO 库用于读取或操作文件。Lua IO 库提供两类文件操作，它们分别是隐式文件描述符(implict file descriptors)和显式文件描述符(explicit file descriptors)。 在接下来的例子的，我们会用到一个...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"Lua错误处理","uid":"8fa5391aad4ba0aa8b3b2333eb0ffb7d","slug":"lua/2016-06-01-error-handling","date":"2024-03-17T14:44:57.296Z","updated":"2024-03-16T11:44:51.815Z","comments":true,"path":"api/articles/lua/2016-06-01-error-handling.json","cover":null,"text":" Lua 错误处理 为什么需要错误处理机制 在真实的系统中程序往往非常复杂，它们经常涉及到文件操作、数据库事务操作或网络服务调用等，这个时候错误处理就显得非常重要。不关注错误处理可能在处理诸如涉密或金融交易这些业务时造成重大的损失。 无论什么时候，程序开发都要求小心地做好错误处理...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"Lua运行环境","uid":"1c92a7bccc4e1c860aee5220573c9c25","slug":"lua/2016-06-01-environment","date":"2024-03-17T14:44:57.293Z","updated":"2024-03-16T11:44:51.814Z","comments":true,"path":"api/articles/lua/2016-06-01-environment.json","cover":null,"text":" Lua 运行环境 本地环境搭建 在本地搭建 Lua 编程语言的开发运行环境，你需要在你的计算机上安装如下三个软件：(1) 文本编辑器。(2) Lua 解释器。（3）Lua 编译器。 文本编辑器 文本编辑器用来编辑你的程序代码。有如下几款常用的文本编辑器软件：Windows no...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"Lua判断","uid":"d6286a3606fee451e0f5f2e41e7f6205","slug":"lua/2016-06-01-decision-making","date":"2024-03-17T14:44:57.289Z","updated":"2024-03-16T11:44:51.814Z","comments":true,"path":"api/articles/lua/2016-06-01-decision-making.json","cover":[],"text":" 决策 决策结构要求程序开发人员设置一个或多测试或计算条件。如果条件计算结果为真，则执行一个或多个语句；如果条件为假，则执行另外的语句。 下面是大多数程序语言中的决策结构的一般形式： Lua 语言中所有布尔真和非 nil 值都当作真；把所有的布尔假和 nil 作为假。请注意，Lu...","link":"","photos":[],"count_time":{"symbolsCount":376,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"Lua调试","uid":"374513b04e64d95f7bc41ddb08581b8d","slug":"lua/2016-06-01-debugging","date":"2024-03-17T14:44:57.285Z","updated":"2024-03-16T11:44:51.814Z","comments":true,"path":"api/articles/lua/2016-06-01-debugging.json","cover":null,"text":" Lua 调试 Lua 提供一个调试库，这个库中提供了创建自己的调试器所需的所有原语函数。虽然，Lua 没有内置调试器，但是开发者们为 Lua 开发了许多的开源调试器。 Lua 调试库包括的函数如下表所示。 S.N. 方法和描述 1 debug():进入交互式调试模式，在此模式下...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"Lua数据库访问","uid":"5593d949c022c9556ceb62d288c587d5","slug":"lua/2016-06-01-database-access","date":"2024-03-17T14:44:57.281Z","updated":"2024-03-16T11:44:51.814Z","comments":true,"path":"api/articles/lua/2016-06-01-database-access.json","cover":null,"text":" Lua 数据库访问 简单的数据操作，我们用文件就可以处理。但是，某些时候文件操作存在性能、扩展性等问题。这时候，我们就需要使用数据库。LuaSQL 是一个提供数据库操作的库，它支持多种 SQL 数据库的操作。包括： SQLite MySQL ODBC 在本教程中，我们会讲解用 ...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"数据类型","uid":"a760ef6d11a2d6078a812f5bc31cf898","slug":"lua/2016-06-01-data-types","date":"2024-03-17T14:44:57.277Z","updated":"2024-03-16T11:44:51.813Z","comments":true,"path":"api/articles/lua/2016-06-01-data-types.json","cover":null,"text":" 数据类型 Lua 是动态类型编程语言，变量没有类型，只有值才有类型。值可以存储在变量中，作为参数传递或者作为返回值。 尽管在 Lua 中没有变量数据类型，但是值是有类型的。下面的列表中列出了数据类型： 值类型 描述 nil 用于区分值是否有数据，nil 表示没有数据。 bool...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"Lua协程","uid":"bce3027296f15638c976f1ebef15c96b","slug":"lua/2016-06-01-coroutines","date":"2024-03-17T14:44:57.273Z","updated":"2024-03-16T11:44:51.813Z","comments":true,"path":"api/articles/lua/2016-06-01-coroutines.json","cover":null,"text":" Lua 协程 概述 协程具有协同的性质，它允许两个或多个方法以某种可控的方式协同工作。在任何一个时刻，都只有一个协程在运行，只有当正在运行的协程主动挂起时它的执行才会被挂起（暂停）。 上面的定义可能看上去比较模糊。接下来让我讲得很清楚一点，假设我们有两个方法，一个是主程序方法，...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}]}