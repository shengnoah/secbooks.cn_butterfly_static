{"title":"Gradio","uid":"45cf7b3c88a23623be0195c6597a4bdf","slug":"aigc/Gradio","date":"2024-03-16T11:44:51.771Z","updated":"2024-03-16T11:44:51.772Z","comments":true,"path":"api/articles/aigc/Gradio.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://s2.loli.net/2024/02/07/Li7MZXHjcuvCSO4.png","content":"<p>用Gradio实现一个调用一个REST API，访问的的API地址是<a href=\"http://10.211.6.6:8081/gelf%EF%BC%8C%E5%8F%82%E6%95%B0a=1,b=2%EF%BC%8C%E8%BF%94%E5%9B%9E%E5%AD%97%E6%AE%B5%E6%9C%893%E4%B8%AAfield1\">http://10.211.6.6:8081/gelf，参数a=1,b=2，返回字段有3个field1</a>, field2, field3, 三个字符的类型都是字符串类型，返回3条数据,结构如下：</p>\n<p>filed1, filed2,field3<br />\na,b,c,<br />\nd,e,f<br />\nh,i,j</p>\n<p>用Gradio交结果分页显出来，用二维表格的形式显示， 给同具体体Gradio实现的Python代码</p>\n<p>下面是使用Gradio实现的Python代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gradio <span class=\"keyword\">as</span> gr</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rest_api_call</span>():</span><br><span class=\"line\">    url = <span class=\"string\">&quot;http://10.211.6.6:8081/gelf&quot;</span></span><br><span class=\"line\">    params = &#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    response = requests.get(url, params=params)</span><br><span class=\"line\">    data = response.json()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">display_results</span>(<span class=\"params\">page</span>):</span><br><span class=\"line\">    data = rest_api_call()</span><br><span class=\"line\">    start_index = (page - <span class=\"number\">1</span>) * <span class=\"number\">3</span></span><br><span class=\"line\">    end_index = page * <span class=\"number\">3</span></span><br><span class=\"line\">    results = data[start_index:end_index]</span><br><span class=\"line\">    </span><br><span class=\"line\">    table_data = [[<span class=\"string\">&quot;field1&quot;</span>, <span class=\"string\">&quot;field2&quot;</span>, <span class=\"string\">&quot;field3&quot;</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">        table_data.append([result[<span class=\"string\">&quot;field1&quot;</span>], result[<span class=\"string\">&quot;field2&quot;</span>], result[<span class=\"string\">&quot;field3&quot;</span>]])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> table_data</span><br><span class=\"line\"></span><br><span class=\"line\">inputs = gr.inputs.Number(label=<span class=\"string\">&quot;Page&quot;</span>, default=<span class=\"number\">1</span>, minimum=<span class=\"number\">1</span>, maximum=<span class=\"number\">2</span>)</span><br><span class=\"line\">outputs = gr.outputs.Table(header=[<span class=\"string\">&quot;field1&quot;</span>, <span class=\"string\">&quot;field2&quot;</span>, <span class=\"string\">&quot;field3&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">interface = gr.Interface(fn=display_results, inputs=inputs, outputs=outputs)</span><br><span class=\"line\"></span><br><span class=\"line\">interface.launch()</span><br></pre></td></tr></table></figure>\n<p>运行这段代码后，将会在浏览器中打开一个页面，可以输入页码来查看对应的数据。默认显示第一页的结果，可以在输入框中修改页码，然后点击&quot;Submit&quot;按钮获取对应页码的数据。数据以二维表格的形式显示在页面上。</p>\n","text":"用Gradio实现一个调用一个REST API，访问的的API地址是http://10.211.6.6:8081/gelf，参数a=1,b=2，返回字段有3个field1, field2, field3, 三个字符的类型都是字符串类型，返回3条数据,结构如下： filed1, f...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"AIGC","slug":"AIGC","count":119,"path":"api/categories/AIGC.json"},{"name":"Gradio","slug":"AIGC/Gradio","count":1,"path":"api/categories/AIGC/Gradio.json"}],"tags":[{"name":"Gradio","slug":"Gradio","count":1,"path":"api/tags/Gradio.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"AI Agents 地图","uid":"77ed20ae201c3c7dc5957973d20f4a5c","slug":"aigc/AI Agents 地图","date":"2024-03-16T11:44:51.771Z","updated":"2024-03-16T11:44:51.771Z","comments":true,"path":"api/articles/aigc/AI Agents 地图.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":" AI Agents 地图 A16z 消费领域合伙人 Olivia Moore 整理的 AI Agents 地图。 她将 Agents 定义为跨系统工作并为用户执行任务的 bots。 3 月份，Agents 这一概念通过Auto-GPT 成为主流，一个月内就在 Github 上获...","link":"","photos":[],"count_time":{"symbolsCount":452,"symbolsTime":"1 mins."},"categories":[{"name":"AIGC","slug":"AIGC","count":119,"path":"api/categories/AIGC.json"},{"name":"weibo","slug":"AIGC/weibo","count":59,"path":"api/categories/AIGC/weibo.json"}],"tags":[{"name":"weibo","slug":"weibo","count":62,"path":"api/tags/weibo.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ChaGLM3在多显卡上运行","uid":"c8a161f78cff976f698872281578706e","slug":"aigc/ChatGLM/ChatGLM3在多显卡上运行","date":"2024-03-16T11:44:51.771Z","updated":"2024-03-16T11:44:51.771Z","comments":true,"path":"api/articles/aigc/ChatGLM/ChatGLM3在多显卡上运行.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":" ChaGLM3在多显卡上运行 在明确是16位量化的时候，用ChatGLM项目中的utils文件的load_model_on_gpus方法，进行对model的配置， num_gpus=4,意思是说在4块显卡上运行。 from utils import load_model_on_...","link":"","photos":[],"count_time":{"symbolsCount":938,"symbolsTime":"1 mins."},"categories":[{"name":"AIGC","slug":"AIGC","count":119,"path":"api/categories/AIGC.json"},{"name":"chatglm3","slug":"AIGC/chatglm3","count":1,"path":"api/categories/AIGC/chatglm3.json"}],"tags":[{"name":"chatglm3","slug":"chatglm3","count":1,"path":"api/tags/chatglm3.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}