{"title":"Lua文件I/O","uid":"7cdf9755b9d268215aaceca81f7a3596","slug":"lua/2016-06-01-file-io","date":"2024-03-17T14:44:57.299Z","updated":"2024-03-17T15:03:45.152Z","comments":true,"path":"api/articles/lua/2016-06-01-file-io.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"lua-文件-io\"><a class=\"markdownIt-Anchor\" href=\"#lua-文件-io\"></a> Lua 文件 I/O</h1>\n<p>Lua 的 IO 库用于读取或操作文件。Lua IO 库提供两类文件操作，它们分别是隐式文件描述符(implict file descriptors)和显式文件描述符(explicit file descriptors)。</p>\n<p>在接下来的例子的，我们会用到一个示例文件 test.lua，文件内容如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- sample test.lua</span></span><br><span class=\"line\"><span class=\"comment\">-- sample2 test.lua</span></span><br></pre></td></tr></table></figure>\n<p>简单的打开文件操作可以用如下的语句完成。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"built_in\">io</span>.<span class=\"built_in\">open</span> (filename [, mode])</span><br></pre></td></tr></table></figure>\n<p>可选的打开文件的模式如下表所示。</p>\n<table>\n\t<tr>\n\t\t<th>模式</th>\n\t\t<th>描述</th>\n\t</tr>\n\t<tr>\n\t\t<td>\"r\"</td>\n\t\t<td>只读模式，这也是对已存在的文件的默认打开模式。</td>\n\t</tr>\n\t<tr>\n\t\t<td>\"w\"</td>\n\t\t<td>可写模式，允许修改已经存在的文件和创建新文件。</td>\n\t</tr>\n\t<tr>\n\t\t<td>\"a\"</td>\n\t\t<td>追加模式，对于已存的文件允许追加新内容，但不允许修改原有内容，同时也可以创建新文件。</td>\n\t</tr>\n\t<tr>\n\t\t<td>\"r+\"</td>\n\t\t<td>读写模式打开已存的在文件。</td>\n\t</tr>\n\t<tr>\n\t\t<td>\"w+\"</td>\n\t\t<td>如果文件已存在则删除文件中数据；若文件不存在则新建文件。读写模式打开。</td>\n\t</tr>\n\t<tr>\n\t\t<td>\"a+\"</td>\n\t\t<td>以可读的追加模式打开已存在文件，若文件不存在则新建文件。</td>\n\t</tr>\n</table>\n<h2 id=\"隐式文件描述符\"><a class=\"markdownIt-Anchor\" href=\"#隐式文件描述符\"></a> 隐式文件描述符</h2>\n<p>隐式文件描述符使用标准输入输出模式或者使用单个输入文件和输出文件。使用隐匿文件描述符的示例代码如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 只读模式打开文件</span></span><br><span class=\"line\">file = <span class=\"built_in\">io</span>.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;test.lua&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 将 test.lua 设置为默认输入文件</span></span><br><span class=\"line\"><span class=\"built_in\">io</span>.<span class=\"built_in\">input</span>(file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--打印输出文件的第一行</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">io</span>.<span class=\"built_in\">read</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 关闭打开的文件</span></span><br><span class=\"line\"><span class=\"built_in\">io</span>.<span class=\"built_in\">close</span>(file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 以追加模式打开文件</span></span><br><span class=\"line\">file = <span class=\"built_in\">io</span>.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;test.lua&quot;</span>, <span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 将 test.lua 设置为默认的输出文件</span></span><br><span class=\"line\"><span class=\"built_in\">io</span>.<span class=\"built_in\">output</span>(file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 将内容追加到文件最后一行</span></span><br><span class=\"line\"><span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(<span class=\"string\">&quot;-- End of the test.lua file&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 关闭打开的文件</span></span><br><span class=\"line\"><span class=\"built_in\">io</span>.<span class=\"built_in\">close</span>(file)</span><br></pre></td></tr></table></figure>\n<p>执行上面的程序，我们可以看到输出了 test.lua 文件的第一行。在本例中，输出的结果为：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Sample test.lua</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">输出的内容是 test.lua 文件中的第一行。“<span class=\"comment\">-- End of the test.lua file” 他会被追加到 test.lua 文件的最后一行。  </span></span><br><span class=\"line\"></span><br><span class=\"line\">从上面的例子中，你可以看到隐式的描述述如何使用 <span class=\"built_in\">io</span>.<span class=\"string\">&quot;x&quot;</span>  方法与文件系统交互。上面的例子使用 <span class=\"built_in\">io</span>.<span class=\"built_in\">read</span>() 函数时没有使用可选参数。此函数的可选参数包括：  </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"built_in\">table</span>&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;th&gt;模式&lt;/th&gt;</span><br><span class=\"line\">\t\t&lt;th&gt;描述&lt;/th&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;<span class=\"string\">&quot;*n&quot;</span>&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;从文件当前位置读入一个数字，如果该位置不为数字则返回 <span class=\"literal\">nil</span>。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;<span class=\"string\">&quot;*a&quot;</span>&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;读入从当前文件指针位置开始的整个文件内容。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;<span class=\"string\">&quot;*i&quot;</span>&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;读入当前行。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;number&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;读入指定字节数的内容。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">&lt;/<span class=\"built_in\">table</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">另外一些常用的方法：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;<span class=\"built_in\">io</span>.<span class=\"built_in\">tmpfile</span>():返回一个可读写的临时文件，程序结束时该文件被自动删除。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;<span class=\"built_in\">io</span>.<span class=\"built_in\">type</span>(file):检测输入参数是否为可用的文件句柄。返回 <span class=\"string\">&quot;file&quot;</span> 表示一个打开的句柄；“closed file” 表示已关闭的句柄；<span class=\"literal\">nil</span> 表示不是文件句柄。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;<span class=\"built_in\">io</span>.<span class=\"built_in\">flush</span>():清空输出缓冲区。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;<span class=\"built_in\">io</span>.<span class=\"built_in\">lines</span>(optional file name): 返回一个通用循环迭代器以遍历文件，每次调用将获得文件中的一行内容,当到文件尾时，将返回<span class=\"literal\">nil</span>。若显示提供了文件句柄，则结束时自动关闭文件；使用默认文件时，结束时不会自动关闭文件。&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 显示文件描述符  </span><br><span class=\"line\"></span><br><span class=\"line\">我们也会经常用到显示文件描述符，因为它允许我们同时操作多个文件。这些函数与隐式文件描述符非常相似，只不过我们在这儿使用 file:function_name 而不是使用 <span class=\"built_in\">io</span>.function_name 而已。下面的例子使用显示文件描述符实现了与前面例子中完全相同的功能。  </span><br><span class=\"line\">　</span><br><span class=\"line\">```lua</span><br><span class=\"line\"><span class=\"comment\">-- 只读模式打开文件</span></span><br><span class=\"line\">file = <span class=\"built_in\">io</span>.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;test.lua&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 输出文件的第一行</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(file:<span class=\"built_in\">read</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 关闭打开的文件</span></span><br><span class=\"line\">file:<span class=\"built_in\">close</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 以追加模式打开文件 </span></span><br><span class=\"line\">file = <span class=\"built_in\">io</span>.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;test.lua&quot;</span>, <span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 添加内容到文件的尾行</span></span><br><span class=\"line\">file:<span class=\"built_in\">write</span>(<span class=\"string\">&quot;--test&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 关闭打开的文件</span></span><br><span class=\"line\">file:<span class=\"built_in\">close</span>()</span><br></pre></td></tr></table></figure>\n<p>执行上面的程序，我们可以得到与前面使用隐式文件描述符类似的输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Sample test.lua</span><br></pre></td></tr></table></figure>\n<p>在显式文件描述符中，打开文件的描述与读文件时的参数与隐式文件描述中的完全相同。另外的常用方法包括：</p>\n<ul>\n\t<li>file:seek(option whence,option offset)：此函数用于移动文件指针至新的位置。参数 whence 可以设置为 “set”，\"cur\",\"end\"，offset 为一个偏移量值，描述相对位置。如果第一个参数为 \"set\"，则相对位置从文件开始处开始计算；如果第一个参数为 \"cur\"，则相对位置从文件当前位置处开始计算； 如果第一个参数为 \"end\"，则相对位置从文件末尾处开始计算。函数的参数默认值分别为 \"cur\" 和 ０，因此不传递参数调用此函数可以获得文件的当前位置。</li>\n\t<li>file:flush()：清空输出缓冲区。</li>\n\t<li>io.lines(optional file name)：提供一个循环迭代器以遍历文件，如果指定了文件名则当遍历结束后将自动关闭该文件；若使用默认文件，则遍历结束后不会自动关闭文件。</li>\n</ul>\n<p>下面的例子演示 seek 函数的使用方法。它将文件指针从文件末尾向前移动 25。并使用 read 函数从该位置出输出剩余的文件内容。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- Opens a file in read</span></span><br><span class=\"line\">file = <span class=\"built_in\">io</span>.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;test.lua&quot;</span>, <span class=\"string\">&quot;r&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">file:seek(<span class=\"string\">&quot;end&quot;</span>,<span class=\"number\">-25</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(file:<span class=\"built_in\">read</span>(<span class=\"string\">&quot;*a&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- closes the opened file</span></span><br><span class=\"line\">file:<span class=\"built_in\">close</span>()</span><br></pre></td></tr></table></figure>\n<p>执行上的面的程序，你可以得到类似下面的输出结果：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> sample2 test.lua</span><br><span class=\"line\"><span class=\"comment\">--test</span></span><br></pre></td></tr></table></figure>\n<p>你还可以尝试不同的参数了解更多的 Lua 文件操作方法。</p>\n<p>测试</p>\n","text":" Lua 文件 I/O Lua 的 IO 库用于读取或操作文件。Lua IO 库提供两类文件操作，它们分别是隐式文件描述符(implict file descriptors)和显式文件描述符(explicit file descriptors)。 在接下来的例子的，我们会用到一个...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E6%96%87%E4%BB%B6-io\"><span class=\"toc-text\"> Lua 文件 I&#x2F;O</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%BC%8F%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\"> 隐式文件描述符</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua函数","uid":"4b8da2e6835e8f700ba371a83ecbe6ab","slug":"lua/2016-06-01-functions","date":"2024-03-17T14:44:57.302Z","updated":"2024-03-16T11:44:51.815Z","comments":true,"path":"api/articles/lua/2016-06-01-functions.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":" Lua 函数 函数用于将一组语句组合起来完成一个任务。你可以将你的代码分割到不同的函数中。如何将你的代码分到不同的函数中完全由你自己决定，不过一般会按照逻辑功能进行划分，每个函数都执行一个特定的任务。 在 Lua 中提供了大量的内置函数供我们使用。例如，print() 函数用于...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua错误处理","uid":"8fa5391aad4ba0aa8b3b2333eb0ffb7d","slug":"lua/2016-06-01-error-handling","date":"2024-03-17T14:44:57.296Z","updated":"2024-03-16T11:44:51.815Z","comments":true,"path":"api/articles/lua/2016-06-01-error-handling.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":" Lua 错误处理 为什么需要错误处理机制 在真实的系统中程序往往非常复杂，它们经常涉及到文件操作、数据库事务操作或网络服务调用等，这个时候错误处理就显得非常重要。不关注错误处理可能在处理诸如涉密或金融交易这些业务时造成重大的损失。 无论什么时候，程序开发都要求小心地做好错误处理...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}