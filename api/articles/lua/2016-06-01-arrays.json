{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"lua/2016-06-01-arrays","date":"2024-03-17T14:44:57.263Z","updated":"2024-03-16T11:44:51.812Z","comments":true,"path":"api/articles/lua/2016-06-01-arrays.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"lua-数组\"><a class=\"markdownIt-Anchor\" href=\"#lua-数组\"></a> Lua 数组</h1>\n<p>数组是一组有序的对象排列，既可以是一维的也可以是多维的。</p>\n<p>在 Lua 语言中，数组是用整数索引表实现的。数组的大小并不固定，随着数组元素的增加，它可以动态地增加内存空间大小。</p>\n<h2 id=\"一维数组\"><a class=\"markdownIt-Anchor\" href=\"#一维数组\"></a> 一维数组</h2>\n<p>一维数组可以使用一个简单的表结构表示。可以通过一个简单循环初始化数组或者读取数组中数据。示例代码如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = &#123;&quot;Lua&quot;, &quot;Tutorial&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for i= 0, 2 do</span><br><span class=\"line\">   print(array[i])</span><br><span class=\"line\">end</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">执行上面的代码可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>nil<br />\nLua<br />\nTutorial</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">从上面的例子中可以看出，当我们尝试着访问数组中一个不存在的索引时，会得到 nil 值。 Lua 语言与 C 语言不同，Lua 数组的索引是从 1 开始的，而 C 语言中索引是从 0 开始的。不过呢，你也可以在索引值为 0 或小于 0 的位置创建对象。下面的代码演示了如何使用负索引值创建并初始化数组：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>array = {}</p>\n<p>for i= -2, 2 do<br />\narray[i] = i *2<br />\nend</p>\n<p>for i = -2,2 do<br />\nprint(array[i])<br />\nend</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>-4<br />\n-2<br />\n0<br />\n2<br />\n4</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 多维数组  </span><br><span class=\"line\"></span><br><span class=\"line\">多维数组有以下两种实现方式：  </span><br><span class=\"line\">&lt;ol&gt;</span><br><span class=\"line\">\t&lt;li&gt;数组的数组（译注：数组的每一个元素是一个数组）。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;修改一维数组的索引值（译注：将多维数组映射到一维数组中）。&lt;/li&gt;</span><br><span class=\"line\">&lt;/ol&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">使用方法一创建 3x3 的二维数组：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– 初始化数组<br />\narray = {}<br />\nfor i=1,3 do<br />\narray[i] = {}<br />\nfor j=1,3 do<br />\narray[i][j] = i*j<br />\nend<br />\nend</p>\n<p>– 访问数组元素<br />\nfor i=1,3 do<br />\nfor j=1,3 do<br />\nprint(array[i][j])<br />\nend<br />\nend</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1<br />\n2<br />\n3<br />\n2<br />\n4<br />\n6<br />\n3<br />\n6<br />\n9</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">通过修改数组的的索引值实现 3x3 的二维数组，示例代码如下:  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– 初始化数组<br />\narray = {}<br />\nmaxRows = 3<br />\nmaxColumns = 3<br />\nfor row=1,maxRows do<br />\nfor col=1,maxColumns do<br />\narray[row<em>maxColumns +col] = row</em>col<br />\nend<br />\nend</p>\n<p>– 访问数组元素<br />\nfor row=1,maxRows do<br />\nfor col=1,maxColumns do<br />\nprint(array[row*maxColumns +col])<br />\nend<br />\nend</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1<br />\n2<br />\n3<br />\n2<br />\n4<br />\n6<br />\n3<br />\n6<br />\n9</p>\n<pre class=\"highlight\"><code class=\"\">\n正如从上面例子中所看到的那样，数组中数据是基于索引存储的。这使得数组可以以稀疏的方式存储，这也是 Lua 矩阵的存储方式。正是因为 Lua 中不会存储 nil 值，所以 Lua　不需要使用任何特殊的技术就可以节约大量的空间，这一点在其它语言中是做不到的。</code></pre>\n","text":" Lua 数组 数组是一组有序的对象排列，既可以是一维的也可以是多维的。 在 Lua 语言中，数组是用整数索引表实现的。数组的大小并不固定，随着数组元素的增加，它可以动态地增加内存空间大小。 一维数组 一维数组可以使用一个简单的表结构表示。可以通过一个简单循环初始化数组或者读取数...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"},{"name":"lua教程","slug":"lua-guide/lua教程","count":2,"path":"api/categories/lua-guide/lua教程.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E6%95%B0%E7%BB%84\"><span class=\"toc-text\"> Lua 数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\"> 一维数组</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua基本语法","uid":"9b97fd5c58ceb41de2e73474e4dfb1f8","slug":"lua/2016-06-01-basic-syntax","date":"2024-03-17T14:44:57.266Z","updated":"2024-03-16T11:44:51.812Z","comments":true,"path":"api/articles/lua/2016-06-01-basic-syntax.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":" 基本语法 Lua 学起来非常简单。现在，让我们开始创建我们的第一个 Lua 程序吧！ 第一个 Lua 程序 Lua 提供交互式编程模式。在这个模式下，你可以一条一条地输入命令，然后立即就可以得到结果。你可以在 shell 中使用 lua -i 或者 lua 命令启动。输入命令后...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"NMAP扫描主机开发的端口","uid":"7df51df4529217f4655b03a0bc83e0ff","slug":"linux/kali/NMAP扫描主机开发的端口","date":"2024-03-17T14:44:57.257Z","updated":"2024-03-16T11:44:51.810Z","comments":true,"path":"api/articles/linux/kali/NMAP扫描主机开发的端口.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":" NMAP扫描主机开发的端口 如何用NMap扫描主机的端口，那些是开放的。 要使用NMap扫描主机的端口，并确定哪些是开放的，可以按照以下步骤进行： 下载和安装NMap：从官方网站（https://nmap.org）下载适用于您的操作系统的NMap安装程序，并完成安装。 打开终端...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"kali","slug":"kali","count":1,"path":"api/categories/kali.json"},{"name":"nmap","slug":"kali/nmap","count":1,"path":"api/categories/kali/nmap.json"}],"tags":[{"name":"nmap","slug":"nmap","count":1,"path":"api/tags/nmap.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}