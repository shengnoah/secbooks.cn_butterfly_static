{"title":"数据类型","uid":"a760ef6d11a2d6078a812f5bc31cf898","slug":"lua/2016-06-01-data-types","date":"2024-03-16T11:44:51.813Z","updated":"2024-03-16T11:44:51.813Z","comments":true,"path":"api/articles/lua/2016-06-01-data-types.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\"></a> 数据类型</h1>\n<p>Lua 是动态类型编程语言，变量没有类型，只有值才有类型。值可以存储在变量中，作为参数传递或者作为返回值。<br />\n尽管在 Lua 中没有变量数据类型，但是值是有类型的。下面的列表中列出了数据类型：</p>\n<table>\n\t<tr>\n\t\t<th>值类型</th>\n\t\t<th>描述</th>\n\t</tr>\n\t<tr>\n\t\t<td>nil</td>\n\t\t<td>用于区分值是否有数据，nil 表示没有数据。</td>\n\t</tr>\n\t<tr>\n\t\t<td>boolean</td>\n\t\t<td>布尔值，有真假两个值，一般用于条件检查。</td>\n\t</tr>\n\t<tr>\n\t\t<td>number</td>\n\t\t<td>数值，表示实数(双精度浮点数)。</td>\n\t</tr>\n\t<tr>\n\t\t<td>string</td>\n\t\t<td>字符串。</td>\n\t</tr>\n\t<tr>\n\t\t<td>function</td>\n\t\t<td>函数，表示由 C 或者 Lua 写的方法。</td>\n\t</tr>\n\t<tr>\n\t\t<td>userdata</td>\n\t\t<td>表示任意 C 数据。</td>\n\t</tr>\n\t<tr>\n\t\t<td>thread</td>\n\t\t<td>线程，表示独立执行的线程，它被用来实现协程。</td>\n\t</tr>\n\t<tr>\n\t\t<td>table</td>\n\t\t<td>表，表示一般的数组，符号表，集合，记录，图，树等等，它还可以实现关联数组。它可以存储除了 nil 外的任何值。</td>\n\t</tr>\n</table> \n<h2 id=\"type-函数\"><a class=\"markdownIt-Anchor\" href=\"#type-函数\"></a> type 函数</h2>\n<p>Lua　中有一个 type　函数，它可以让我们知道变量的类型。下面的代码中给出了一些例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(type(&quot;What is my type&quot;))   --&gt; string</span><br><span class=\"line\">t=10</span><br><span class=\"line\">print(type(5.8*t))               --&gt; number</span><br><span class=\"line\">print(type(true))                --&gt; boolean</span><br><span class=\"line\">print(type(print))               --&gt; function</span><br><span class=\"line\">print(type(type))                --&gt; function</span><br><span class=\"line\">print(type(nil))                 --&gt; nil</span><br><span class=\"line\">print(type(type(ABC)))           --&gt; string</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">在 Linux 系统中运行上面的代码可以得到如下的结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>string<br />\nnumber<br />\nfunction<br />\nfunction<br />\nboolean<br />\nnil<br />\nstring</p>\n<pre class=\"highlight\"><code class=\"\">\n默认情况下，在被初始化或赋值前，所有变量都指向 nil。 Lua 中空字符串和零在条件检查时，都被当作真。所以你在使用布尔运算的时候要特别注意。在下一章中，我们会了解到更多关于这些类型的知识。\n</code></pre>\n","text":" 数据类型 Lua 是动态类型编程语言，变量没有类型，只有值才有类型。值可以存储在变量中，作为参数传递或者作为返回值。 尽管在 Lua 中没有变量数据类型，但是值是有类型的。下面的列表中列出了数据类型： 值类型 描述 nil 用于区分值是否有数据，nil 表示没有数据。 bool...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\"> 数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#type-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> type 函数</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Break语句","uid":"1e07952645adeb0063307933aff99e35","slug":"lua/2016-06-01-break","date":"2024-03-16T11:44:51.813Z","updated":"2024-03-16T11:44:51.813Z","comments":true,"path":"api/articles/lua/2016-06-01-break.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"#break 语句 程序在解释执行过程中，在循环内遇到 break 语句时，循环将立即结束。程序将循环语句的下一条语句开始执行。 如果你是在嵌套循环（即，一个循环内还有一个循环语句）内使用 break 语句，break 只结束内层循环，并从该代码块后的第一条语句处开始执行。 语法...","link":"","photos":[],"count_time":{"symbolsCount":588,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"lua/2016-06-01-Home","date":"2024-03-16T11:44:51.812Z","updated":"2024-03-16T11:44:51.812Z","comments":true,"path":"api/articles/lua/2016-06-01-Home.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua基础教程 permalink: /lua_guide/Home/ ","link":"","photos":[],"count_time":{"symbolsCount":36,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}