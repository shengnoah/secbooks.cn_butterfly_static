{"title":"Lua运行环境","uid":"1c92a7bccc4e1c860aee5220573c9c25","slug":"lua/2016-06-01-environment","date":"2024-03-17T14:44:57.293Z","updated":"2024-03-16T11:44:51.814Z","comments":true,"path":"api/articles/lua/2016-06-01-environment.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"lua-运行环境\"><a class=\"markdownIt-Anchor\" href=\"#lua-运行环境\"></a> Lua 运行环境</h1>\n<h2 id=\"本地环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#本地环境搭建\"></a> 本地环境搭建</h2>\n<p>在本地搭建 Lua 编程语言的开发运行环境，你需要在你的计算机上安装如下三个软件：(1) 文本编辑器。(2)  Lua 解释器。（3）Lua 编译器。</p>\n<h3 id=\"文本编辑器\"><a class=\"markdownIt-Anchor\" href=\"#文本编辑器\"></a> 文本编辑器</h3>\n<p>文本编辑器用来编辑你的程序代码。有如下几款常用的文本编辑器软件：Windows notepad、Brief、Epsilon、EMACS、vim/vi。</p>\n<p>在不同的操作系统中有各自不同的编辑器，而且编辑器的版本不一样。例如，Notepad 主要用在 Windows 系统中，vim/vi 不仅可以用于 Windows 系统也可以用于 Linux 和 UNIX 操作系统。</p>\n<p>用文本编辑器编辑的文件被称为源文件。源文件中包含程序的源代码。Lua 程序的源文件经常以 .lua　作为其后缀名。</p>\n<p>开始编写程序之前，请确保您已经安装好一个文本编辑软件，并且曾经有过写代码，将其存入文件，生成并执行的经验。</p>\n<h3 id=\"lua-解释器\"><a class=\"markdownIt-Anchor\" href=\"#lua-解释器\"></a> Lua 解释器</h3>\n<p>Lua 解释器是一个能让您输入 Lua　命令并立即执行的小程序。它在执行一个　Lua 文件过程中，一旦遇到错误就立即停止执行，而不像编译器会执行完整个文件。</p>\n<h3 id=\"lua-编译器\"><a class=\"markdownIt-Anchor\" href=\"#lua-编译器\"></a> Lua 编译器</h3>\n<p>如果将 Lua 扩展到其它语言或者应用中时，我们需要一个软件开发工具箱以及 Lua 应用程序接口兼容的编译器。</p>\n<h2 id=\"在-windows-系统安装-lua\"><a class=\"markdownIt-Anchor\" href=\"#在-windows-系统安装-lua\"></a> 在 Windows 系统安装 Lua</h2>\n<p>在 Windows 系统环境可以安装一个叫 SciTE 的 Lua 开发 IDE (集成开发环境)。它可以在这儿下载：<a href=\"http://code.google.com/p/luaforwindows/\">http://code.google.com/p/luaforwindows</a>。</p>\n<p>运行下载的可执行程序就可安装 Lua 语言的 IDE 了。</p>\n<p>在这个 IDE 上，你可以创建并生成 Lua 代码。</p>\n<p>如果你希望在命令行模式下安装 Lua，你则需要安装 MinGW 或者 Cygwin，然后在 Ｗindows 系统中编译安装 Lua。</p>\n<h2 id=\"在-linux-系统安装-lua\"><a class=\"markdownIt-Anchor\" href=\"#在-linux-系统安装-lua\"></a> 在 Linux 系统安装 Lua</h2>\n<p>使用下面的命令下载并生成 Lua 程序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.lua.org/ftp/lua-5.2.3.tar.gz</span><br><span class=\"line\">$ tar zxf lua-5.2.3.tar.gz</span><br><span class=\"line\">$ cd lua-5.2.3</span><br><span class=\"line\">$ make linux test</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">在其它系统上安装 Lua 时，比如 aix，ansi，bsd，generic，linux，mingw，posix，solaris，你需要将 make linux test 命令中的 linux 替换为相应的系统平台名称。</span><br><span class=\"line\"> </span><br><span class=\"line\">假设我们已经有一个文件 helloWord.lua ，文件内容如下：  </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<p>print(“Hello World!”)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">我们先使用 cd 命令切换至 helloWord.lua　文件所在的目录，然后生成并运行该文件：　　</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>$ lua helloWorld</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的命令，我们可以看到如下的输出：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>hello world</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 在 Mac OS X 系统安装 Lua  </span><br><span class=\"line\"></span><br><span class=\"line\">使用下面的命令可以在 Mac OS X 系统生成并测试 Lua：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>$ curl -R -O <a href=\"http://www.lua.org/ftp/lua-5.2.3.tar.gz\">http://www.lua.org/ftp/lua-5.2.3.tar.gz</a><br />\n$ tar zxf lua-5.2.3.tar.gz<br />\n$ cd lua-5.2.3<br />\n$ make macosx test</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">如果你没有安装 Xcode 和命令行工具，那么你就不能使用 make 命令。你先需要从 mac 应用商店安装 Xcode，然后在 Xcode 首选项的下载选项中安装命令行工具组件。完成上面的步骤后，你就可以使用 make 命令了。  </span><br><span class=\"line\">make macosx test 命令并不是非执行不可的。即使你没有执行这个命令，你仍可以在你的 Mac OS X 系统中使用 Lua。</span><br><span class=\"line\">  </span><br><span class=\"line\">假设我们已经有一个文件 helloWord.lua ，文件内容如下：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>print(“Hello World!”)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">我们先使用 cd 命令切换至 helloWord.lua　文件所在的目录，然后生成并运行该文件：　　</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>$ lua helloWorld</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的命令，我们可以看到如下的输出：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>hello world</p>\n<pre class=\"highlight\"><code class=\"\">\n## Lua IDE  \n\n正如前面提到的那样，Windows 系统中 SciTE 是 Lua 创始团队提供的默认的 Lua 集成开发环境（IDE)。 此外，还有一款名叫 ZeroBrane 的 IDE。 它具有跨平台的特性，支持 Windows、Mac 与 Linux。  \n同时，许多 eclipse 插件使得 eclipse 能成为 Lua 的 IDE。IDE 中像代码自动补全等诸多特性使得开发变得简单了很多，因此建议你使用 IDE 开发 Lua 程序。同样，IDE 也能像 Lua 命令行版本那样提供交互式编程功能。</code></pre>\n","text":" Lua 运行环境 本地环境搭建 在本地搭建 Lua 编程语言的开发运行环境，你需要在你的计算机上安装如下三个软件：(1) 文本编辑器。(2) Lua 解释器。（3）Lua 编译器。 文本编辑器 文本编辑器用来编辑你的程序代码。有如下几款常用的文本编辑器软件：Windows no...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\"> Lua 运行环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\"> 本地环境搭建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8\"><span class=\"toc-text\"> 文本编辑器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lua-%E8%A7%A3%E9%87%8A%E5%99%A8\"><span class=\"toc-text\"> Lua 解释器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lua-%E7%BC%96%E8%AF%91%E5%99%A8\"><span class=\"toc-text\"> Lua 编译器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8-windows-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85-lua\"><span class=\"toc-text\"> 在 Windows 系统安装 Lua</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8-linux-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85-lua\"><span class=\"toc-text\"> 在 Linux 系统安装 Lua</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua错误处理","uid":"8fa5391aad4ba0aa8b3b2333eb0ffb7d","slug":"lua/2016-06-01-error-handling","date":"2024-03-17T14:44:57.296Z","updated":"2024-03-16T11:44:51.815Z","comments":true,"path":"api/articles/lua/2016-06-01-error-handling.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":" Lua 错误处理 为什么需要错误处理机制 在真实的系统中程序往往非常复杂，它们经常涉及到文件操作、数据库事务操作或网络服务调用等，这个时候错误处理就显得非常重要。不关注错误处理可能在处理诸如涉密或金融交易这些业务时造成重大的损失。 无论什么时候，程序开发都要求小心地做好错误处理...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua判断","uid":"d6286a3606fee451e0f5f2e41e7f6205","slug":"lua/2016-06-01-decision-making","date":"2024-03-17T14:44:57.289Z","updated":"2024-03-16T11:44:51.814Z","comments":true,"path":"api/articles/lua/2016-06-01-decision-making.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":" 决策 决策结构要求程序开发人员设置一个或多测试或计算条件。如果条件计算结果为真，则执行一个或多个语句；如果条件为假，则执行另外的语句。 下面是大多数程序语言中的决策结构的一般形式： Lua 语言中所有布尔真和非 nil 值都当作真；把所有的布尔假和 nil 作为假。请注意，Lu...","link":"","photos":[],"count_time":{"symbolsCount":376,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}