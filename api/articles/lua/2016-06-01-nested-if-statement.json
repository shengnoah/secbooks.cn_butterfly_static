{"title":"Lua中的嵌套 if 语句","uid":"5244c371e170ba321efd30c500d79562","slug":"lua/2016-06-01-nested-if-statement","date":"2024-03-16T11:44:51.817Z","updated":"2024-03-16T11:44:51.817Z","comments":true,"path":"api/articles/lua/2016-06-01-nested-if-statement.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>#Lua 中的嵌套 if 语句</p>\n<p>在 Lua 语言中，你可以合法的嵌套使用 if-else 语句。这也就是说，你可以在一个 if 或 if-else 语句内再使用一个　if 或 if-else 语句。</p>\n<p>##语法</p>\n<p>嵌套 if 语句的语法规则如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if( boolean_expression 1)</span><br><span class=\"line\">then</span><br><span class=\"line\">   --[ 如果布尔表达式 1 为真，则执行此处代码。 --]</span><br><span class=\"line\">   if(boolean_expression 2)</span><br><span class=\"line\">   then</span><br><span class=\"line\">      --[ 如果布尔表达式 2 为真（注：布尔表达式 1 为真），则执行此处代码）。 --]</span><br><span class=\"line\">   end</span><br><span class=\"line\">end</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">你也可以像嵌套使用 if 语句那样使用嵌套使用 else if...else 语句。  </span><br><span class=\"line\"></span><br><span class=\"line\">##示例  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>–[ 定义局部变量 --]<br />\na = 100;<br />\nb = 200;<br />\n–[ 检查条件真假 --]<br />\nif( a == 100 )<br />\nthen<br />\n–[ 如果前面的条件为真，再检查下面的条件。 --]<br />\nif( b == 200 )<br />\nthen<br />\n–[ 如果条件为真，则输出如下内容 --]<br />\nprint(“Value of a is 100 and b is 200” );<br />\nend<br />\nend<br />\nprint(“Exact value of a is :”, a );<br />\nprint(“Exact value of b is :”, b );</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码，可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Value of a is 100 and b is 200<br />\nExact value of a is :\t100<br />\nExact value of b is :\t200</p>\n<pre class=\"highlight\"><code class=\"\"></code></pre>\n","text":"#Lua 中的嵌套 if 语句 在 Lua 语言中，你可以合法的嵌套使用 if-else 语句。这也就是说，你可以在一个 if 或 if-else 语句内再使用一个 if 或 if-else 语句。 ##语法 嵌套 if 语句的语法规则如下： 123456789101112131...","link":"","photos":[],"count_time":{"symbolsCount":718,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua模块","uid":"795dd91f8815508a13e65b7151fdf68c","slug":"lua/2016-06-01-modules","date":"2024-03-16T11:44:51.817Z","updated":"2024-03-16T11:44:51.817Z","comments":true,"path":"api/articles/lua/2016-06-01-modules.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":" Lua 模块 什么是模块？ Lua 中的模块与库的概念相似，每个模块都有一个全局唯一名字，并且每个模块都包含一个表。使用一个模块时，可以使用 require 加载模块。模块中可以包括函数和变量，所有这些函数和变量被表存储于模块的表中。模块中的表的功能类似于命名空间，用于隔离不同...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"lua/2016-06-01-metatables","date":"2024-03-16T11:44:51.817Z","updated":"2024-03-16T11:44:51.817Z","comments":true,"path":"api/articles/lua/2016-06-01-metatables.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":" Lua 元表 正如其名，元表也是表。不过，将元表与表相关联后，我们就可以通过设置元表的键和相关方法来改变表的行为。元方法的功能十分强大，使用元方法可以实现很多的功能，比如： 修改表的操作符功能或为操作符添加新功能（译注：如果您学过 C++ 之类的面向对象的语言，应该比较好理解，...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"LUA教程","slug":"LUA教程","count":4,"path":"api/tags/LUA教程.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}