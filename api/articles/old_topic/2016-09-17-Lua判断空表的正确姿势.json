{"title":"Lua判断空表的正确姿势","uid":"713e977b7d1b8fcae8cb4a255a6ea756","slug":"old_topic/2016-09-17-Lua判断空表的正确姿势","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-16T11:44:51.900Z","comments":true,"path":"api/articles/old_topic/2016-09-17-Lua判断空表的正确姿势.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者:ms2008</p>\n<p>编辑:糖果</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> t == &#123;&#125; <span class=\"keyword\">then</span></span><br></pre></td></tr></table></figure>\n<p>这样的结果就是 t == {} 永远返回 false，是一个逻辑错误。因为这里比较的是 table t 和一个匿名 table 的内存地址。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">table</span>.<span class=\"built_in\">maxn</span>(t) == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br></pre></td></tr></table></figure>\n<p>这样做也不保险，除非 table 的 key 都是数字，而没有 hash 部分。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">next</span>(t) == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br></pre></td></tr></table></figure>\n<p>next 其实就是 pairs 遍历 table 时用来取下一个内容的函数。在项目的 module 中最好封装一下，免得 module 本地也有 next 函数。封装后判断的 lua table 是否为空的函数如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">table_is_empty</span><span class=\"params\">(t)</span></span> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">_G</span>.<span class=\"built_in\">next</span>(t) == <span class=\"literal\">nil</span> </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.lua.ren\">糖果实验室编辑整理</a></p>\n","text":"作者:ms2008 编辑:糖果 1if t == {} then 这样的结果就是 t == {} 永远返回 false，是一个逻辑错误。因为这里比较的是 table t 和一个匿名 table 的内存地址。 1if table.maxn(t) == 0 then 这样做也不保险，...","link":"","photos":[],"count_time":{"symbolsCount":389,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"二分查找","uid":"d843ced03f40ac612213952de4b63ad2","slug":"old_topic/2016-17-Lua二分查找算法实现","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-16T11:44:51.901Z","comments":true,"path":"api/articles/old_topic/2016-17-Lua二分查找算法实现.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940#include<stdio.h>int bseek(int key) { int array[10] = {1,2,3,4,5,6,7,...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"},{"name":"折半查找","slug":"折半查找","count":2,"path":"api/tags/折半查找.json"},{"name":"二分查找","slug":"二分查找","count":2,"path":"api/tags/二分查找.json"},{"name":"lua二分查找","slug":"lua二分查找","count":2,"path":"api/tags/lua二分查找.json"},{"name":"c","slug":"c","count":2,"path":"api/tags/c.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{}}