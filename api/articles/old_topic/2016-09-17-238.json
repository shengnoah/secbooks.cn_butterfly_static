{"title":"LVS负载均衡下的Openresty间的主从Redis同步","uid":"1e50e730134daba789397d1d6a4f834b","slug":"old_topic/2016-09-17-238","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-16T11:44:51.861Z","comments":true,"path":"api/articles/old_topic/2016-09-17-238.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>LVS负载均衡下的Openresty间的主从redis同步</p>\n<h3>正文：</h3> \n像一般在多台提供相同服务的Openresty服务前端会挂F5或是Ha,做为负载均衡，因为逻辑关系有时会用共享使用一份Redis，如果这时，使用Redis的主从模式，就可以很好共享一份Redis服务的数据，但从时间上讲，还是存在数据同步的延时的问题。\n<p>简单说一下Redis的主从设置：</p>\n<p>在redis安装的目录，或是etc下会找到redis的配置文件， redis.conf。只要在配置文件追加两句话，就可以配置主从模式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slaveof 192.168.0.0.1 6379</span><br><span class=\"line\">masterauth password</span><br></pre></td></tr></table></figure>\n<p><strong>slaveof</strong> ：子句后指定主服务器的地址和端口号。<br />\n<strong>masterauth</strong> ： 后跟主服务器的登陆密码。</p>\n<p>设置后重起一下Redis：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure>\n<p>分别登陆一下两台机器，简单的可以看一下数据是否同步。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br><span class=\"line\">&gt;keys *</span><br></pre></td></tr></table></figure>\n<h3>后记：</h3> \n<p>在某种情况下，同一上HA后的两个Openresty服务，很可能不在一个大楼的网络里，这种互备的情况，当一台服务器出现问题时，另一台可以作备机，因为平时网络和其它原因，redis主从同步也是有延迟的，这样可以把服务都只向一台Redis机器，另外一台只做数据备份,需要时和实际业务进行挂载。</p>\n","text":"LVS负载均衡下的Openresty间的主从redis同步 正文： 像一般在多台提供相同服务的Openresty服务前端会挂F5或是Ha,做为负载均衡，因为逻辑关系有时会用共享使用一份Redis，如果这时，使用Redis的主从模式，就可以很好共享一份Redis服务的数据，但从时间...","link":"","photos":[],"count_time":{"symbolsCount":588,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">正文：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">后记：</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Paloalto的Log数据推送思路与Syslog-NG服务使用与配置","uid":"cb434518329140d52cda782e9eb061d5","slug":"old_topic/2016-09-17-234","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-16T11:44:51.861Z","comments":true,"path":"api/articles/old_topic/2016-09-17-234.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"前言： 对于Log数据集中收集管理来说，Syslog服务的重要性不言而喻。比如在平时，Openresty就吐出很多log数据，对这些数据进行集中，可以对积累的数据进行分析，从中找到很多有价值的信息。 像paloalto这种设备，可以根据定制化的策略规则产生的数据，对应不同机器的不...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua的HTTP库","uid":"7c6c0bd644fe170c87ec457e7a5178a5","slug":"old_topic/2016-09-17-235","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-16T11:44:51.861Z","comments":true,"path":"api/articles/old_topic/2016-09-17-235.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"其实除lua curl，还有另外一个库，也用以用HTTP请求。就是lua socket的http请求。 可以用这种方式进行http请求和简单的数据爬取，然后用正则，对返回的数据进行分析。 123http = require(\"socket.http\")body, ret = ht...","link":"","photos":[],"count_time":{"symbolsCount":206,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}