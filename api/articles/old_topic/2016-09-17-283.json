{"title":"Python的命令行解析工具OptParse","uid":"3d930fa3cf2f5987b2f125f1dac087cf","slug":"old_topic/2016-09-17-283","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-16T11:44:51.870Z","comments":true,"path":"api/articles/old_topic/2016-09-17-283.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<p>无论是用C语言，还是用Java，有时都会写一些命令行的工具，解析用户在命令输入的参数，而Python有自己特色的命令行参数解析库，就是optparse。hpfeed-cli的源码就是用optparse来解析命令行参数的，hpfeed是给威胁地图发送威胁数据的，使用的是hpfeed协议，hpfeed-cli是一个在terminal中直接运行的命令行程序，有着非常复杂的参数输入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> optparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>(<span class=\"params\">opts, action, pubdata=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    outfd = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> action</span><br><span class=\"line\">    <span class=\"built_in\">print</span> data</span><br><span class=\"line\">    <span class=\"built_in\">print</span> options</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">opts</span>():</span><br><span class=\"line\">    usage = <span class=\"string\">&quot;usage: %prog -i ident -s secret --host host -p port -c channel1 [-c channel2, ...] &lt;action&gt; [&lt;data&gt;]&quot;</span></span><br><span class=\"line\">    parser = optparse.OptionParser(usage=usage)</span><br><span class=\"line\"></span><br><span class=\"line\">    parser.add_option(<span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;--chan&quot;</span>,</span><br><span class=\"line\">    action=<span class=\"string\">&quot;append&quot;</span>, dest=<span class=\"string\">&#x27;channels&#x27;</span>, nargs=<span class=\"number\">1</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;string&#x27;</span>,</span><br><span class=\"line\">    <span class=\"built_in\">help</span>=<span class=\"string\">&quot;channel (can be used multiple times)&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    parser.add_option(<span class=\"string\">&quot;--debug&quot;</span>,</span><br><span class=\"line\">    action=<span class=\"string\">&quot;store_const&quot;</span>, dest=<span class=\"string\">&#x27;debug&#x27;</span>,</span><br><span class=\"line\">    <span class=\"built_in\">help</span>=<span class=\"string\">&quot;enable debug log output&quot;</span>, default=<span class=\"literal\">False</span>, const=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    options, args = parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) &lt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        parser.error(<span class=\"string\">&#x27;You need to give &quot;subscribe&quot; or &quot;publish&quot; as &lt;action&gt;.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args[<span class=\"number\">0</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;subscribe&#x27;</span>, <span class=\"string\">&#x27;publish&#x27;</span>, <span class=\"string\">&#x27;sendfile&#x27;</span>]:</span><br><span class=\"line\">        parser.error(<span class=\"string\">&#x27;You need to give &quot;subscribe&quot; or &quot;publish&quot; as &lt;action&gt;.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> options.debug:</span><br><span class=\"line\">        logging.basicConfig(level=logging.DEBUG)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        logging.basicConfig(level=logging.CRITICAL)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    action = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">    data = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> action == <span class=\"string\">&#x27;publish&#x27;</span>:</span><br><span class=\"line\">        data = <span class=\"string\">&#x27; &#x27;</span>.join(args[<span class=\"number\">1</span>:])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> action == <span class=\"string\">&#x27;sendfile&#x27;</span>:</span><br><span class=\"line\">        data = <span class=\"string\">&#x27; &#x27;</span>.join(args[<span class=\"number\">1</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> options, action, data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">        options, action, data = opts()</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                sys.exit(main(options, action, pubdata=data))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyboardInterrupt:</span><br><span class=\"line\">                sys.exit(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>从命令行输入的数据来看， 把数据归为三类：</p>\n<h5 id=\"1action动作\"><a class=\"markdownIt-Anchor\" href=\"#1action动作\"></a> 1.action(动作)</h5>\n<h5 id=\"2data动作对应的数据\"><a class=\"markdownIt-Anchor\" href=\"#2data动作对应的数据\"></a> 2.data(动作对应的数据)</h5>\n<h5 id=\"3options动作具体的选项\"><a class=\"markdownIt-Anchor\" href=\"#3options动作具体的选项\"></a> 3.options（动作具体的选项）</h5>\n<p>以上的action其实是命令行定义的动作，简单说就是执行那种类型的命令，这个命令是命令行的子命令，理论上可以很多，而data就是执行action命令时需要的数据，这数据可以是一个列表。options也可以设置很多个，和option来设置命令执行的方式和区别。</p>\n<p>我们根据以上程序的设定来执行一下这个程序，在命令行输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python blog-client.py sendfile data_element1 data_element2 data_element3 -c channel --debug</span><br></pre></td></tr></table></figure>\n<p>然后，分别看一个 ，action，data，options的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sendfile</span><br><span class=\"line\">data_element1 data_element2 data_element3</span><br><span class=\"line\">&#123;&#x27;channels&#x27;: [&#x27;channel&#x27;], &#x27;debug&#x27;: True&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"action是字符串sendfile\"><a class=\"markdownIt-Anchor\" href=\"#action是字符串sendfile\"></a> action是字符串：sendfile</h5>\n<h5 id=\"data是列表data_element1-data_element2-data_element3\"><a class=\"markdownIt-Anchor\" href=\"#data是列表data_element1-data_element2-data_element3\"></a> data是列表：data_element1 data_element2 data_element3</h5>\n<h5 id=\"options是map列表channels-channel-debug-true\"><a class=\"markdownIt-Anchor\" href=\"#options是map列表channels-channel-debug-true\"></a> options是map列表：{‘channels’: [‘channel’], ‘debug’: True}</h5>\n<p>这样我们就将用户命令行输入的参数都解析到适当的数据结构中了，接着要做的就是根据参数定义，执行我们业务逻辑代码。<br />\n关于这个库的使用的API，几个：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optparse.OptionParser(usage=usage)</span><br><span class=\"line\">parser.add_option</span><br><span class=\"line\">parser.parse_args</span><br><span class=\"line\">parser.error</span><br></pre></td></tr></table></figure>\n<p>这个可以结合代码，领会一下意思吧!</p>\n","text":"作者：糖果 无论是用C语言，还是用Java，有时都会写一些命令行的工具，解析用户在命令输入的参数，而Python有自己特色的命令行参数解析库，就是optparse。hpfeed-cli的源码就是用optparse来解析命令行参数的，hpfeed是给威胁地图发送威胁数据的，使用的是...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1action%E5%8A%A8%E4%BD%9C\"><span class=\"toc-text\"> 1.action(动作)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2data%E5%8A%A8%E4%BD%9C%E5%AF%B9%E5%BA%94%E7%9A%84%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\"> 2.data(动作对应的数据)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3options%E5%8A%A8%E4%BD%9C%E5%85%B7%E4%BD%93%E7%9A%84%E9%80%89%E9%A1%B9\"><span class=\"toc-text\"> 3.options（动作具体的选项）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#action%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2sendfile\"><span class=\"toc-text\"> action是字符串：sendfile</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#data%E6%98%AF%E5%88%97%E8%A1%A8data_element1-data_element2-data_element3\"><span class=\"toc-text\"> data是列表：data_element1 data_element2 data_element3</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#options%E6%98%AFmap%E5%88%97%E8%A1%A8channels-channel-debug-true\"><span class=\"toc-text\"> options是map列表：{‘channels’: [‘channel’], ‘debug’: True}</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"用ORC自动生成的OpenResty配置文件和目录结构","uid":"173cf106caf72fbe34b81903048e26a6","slug":"old_topic/2016-09-17-287","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-16T11:44:51.871Z","comments":true,"path":"api/articles/old_topic/2016-09-17-287.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 ORC是LOR的本地改动版，可以通简单的命令快速的生成Openresty的配置文件和目录结构： 安装ORC，然后执行下下面的操作： 1.安装 sudo sh install.sh 2.生成工程 orc project testcase 3.控制工程 进入testcas...","link":"","photos":[],"count_time":{"symbolsCount":186,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ORC的启动脚本的封装脚本","uid":"c6a3fbdf3ee60556386c48d2c1ba423b","slug":"old_topic/2016-09-17-288","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-16T11:44:51.871Z","comments":true,"path":"api/articles/old_topic/2016-09-17-288.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"这种是在生成shell的方式时，都shell的一种封装，尽量在shell用上去，看着简洁点。 1234567891011121314151617181920212223242526272829############################################...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}